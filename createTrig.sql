DROP TRIGGER TRIG_EPISODE_RATING;

--After inserting a review recalculate episodes rating
CREATE TRIGGER TRIG_EPISODE_RATING
AFTER INSERT ON REVIEW
REFERENCING NEW AS N
FOR EACH ROW
BEGIN
    DECLARE old_rating DOUBLE;
    DECLARE number_review DOUBLE;
    DECLARE episode_rating DOUBLE;
    SET old_rating = (SELECT RATING
                      FROM EPISODE E
                      WHERE E.SERIESID = N.SERIESID AND E.NUMBER = N.EPISODENUMBER AND E.SEASONNUMBER = N.EPISODESEASON);
    SET number_review = (SELECT COUNT(R.FROM)
                        FROM REVIEW R
                        WHERE R.SERIESID = N.SERIESID AND R.EPISODESEASON = N.EPISODESEASON AND R.EPISODENUMBER = N.EPISODENUMBER);
    SET episode_rating = ((old_rating * (number_review - 1)) + N.RATING)/number_review;
    UPDATE EPISODE E
        SET E.RATING = episode_rating
    WHERE E.SERIESID = N.SERIESID AND E.NUMBER = N.EPISODENUMBER AND E.SEASONNUMBER = N.EPISODESEASON;
end;

SELECT RATING, NAME
FROM EPISODE;

INSERT INTO REVIEW (FROM, RATING, TEXT, SERIESID, EPISODENUMBER, EPISODESEASON) VALUES ('firemuffin', 9, 'Really loved it', FN45454.GET_SERIES_ID('Gravity Falls'), 1, 1);


DROP TRIGGER TRIG_REVIEW_RATING;

-- Trigger for constraining the rating of reviews
CREATE TRIGGER TRIG_REVIEW_RATING
    BEFORE INSERT ON FN45454.REVIEW
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.RATING > 10 OR N.RATING < 1)
    BEGIN
        IF N.RATING > 10 THEN
            SET N.RATING = 10;
        ELSE
            SET N.RATING = 1;
        END IF;
    END;


INSERT INTO REVIEW (FROM, RATING, TEXT, SERIESID, EPISODENUMBER, EPISODESEASON)
 VALUES ('TRIGGER_TEST', 15, 'TRIGGER_TEST', FN45454.GET_SERIES_ID('Gravity Falls'), 1, 1);

INSERT INTO REVIEW (FROM, RATING, TEXT, SERIESID, EPISODENUMBER, EPISODESEASON)
VALUES ('TRIGGER_TEST2', -10, 'TRIGGER_TEST', FN45454.GET_SERIES_ID('Gravity Falls'), 1, 1);

SELECT RATING
FROM REVIEW
WHERE FROM LIKE 'TRIGGER_TEST%';
